M[1]
M[2]
M[]
M[1:6]
M[2,]
M[2,2]
M[3,2]
M[,2]
colnames(M) <- c('C1', 'C2')
rownames(M) <- c('A', 'B','C')
M$r1
M[r1,]
M[C1,]
M[C,]
M[C]
M['C']
M
M$C1
M[A,C1]
M
M['A',]
M['B',]
M['C',]
M[,'C1']
M[,'C2']
M['A','C2']
data.frame(M)
M$A
M$C
Mdata <- data.frame(M)
Mdata
Mdata$C1
Mdata <- data.frame(M)
library(ggplot2)
qplot(C1, C2, data = Mdata)
x <- data.frame(foo = 1:4, bar = c("A","B","C","D"), thr= c(T,T,F,T))
print(x)
nrow(x)
ncol(x)
mrg
print(mpg)
names(mpg)
head(mpg)
tail(mpg)
names(X)
names(X)x
names(x)
str(x)
x$foo
x$bar
x[2,1]
x[2,2]
x[2,]
x[2,'bar']
x$bar
x$foo
dim(x)
nrow(x)
dim(mpg)
? mpg
str(mpg)
typeof(1)
typeof(1.2)
summary(mpg)
summary(x)
summary(M)
qplot(displ, drv)
qplot(displ, drv, data =mpg)
qplot(displ,  data =mpg)
list(myvector = 1:5, mymatrix = M, mydata = x)
mylist <- list(myvector = 1:5, mymatrix = M, mydata = x)
mylist
summary(mylist)
mylist$myvector
mylist$myvector[1]
mylist$mymatrix[2,]
mylist$mydata$foo
mylist$mydata$bar
Sys.time()
production <- read.table("http://www.stat.tamu.edu/~sheather/book/docs/datasets/production.txt",
header=T,
sep="")
plot(RunTime ~ RunSize)
production
plot(production$RunTime ~ production$RunSize)
plot(production$RunTime , production$RunSize)
plot(production$RunTime ~ production$RunSize)
plot(production$RunTime , production$RunSize)
plot(production$RunTime ~ production$RunSize)
production.lm <- lm(RunTime ~ RunSize ,
data=production)
summary(production.lm)
anova(production.lm)
pred_production <- predict(production.lm , interval="confidence")
pred_production
plot(production$RunSize, pred_production$fit)
plot(production$RunSize, pred_production[1,])
plot(production$RunSize, pred_production[,1])
# examples
# examples
x <- list(a = c(1,2,3,4), b = rnorm (10))
x
lapply(x, mean)
lapply(x, length)
y <- list( A = runif(1,0,1), B = runif(2,0,2), C = runif(3,0,3))
y
lapply(y, function(Z) Z[length(Z)])
xmean <- lapply(x, mean)
class(xmean)
lapply(y, function(N) max(N)/2)
lapply(y, function(N) max(N)/min(N))
x$a
x$a[3] = NaN
x$a
xmean <- lapply(x, mean)
xmean
lapply(x, mean, na.rm = TRUE)
lapply(x, mean)
is.nan(Na)
is.nan(NA)
is.na(NaN)
T <- list(1,2,3,4)
Q <- lapply(T, runif, min = 0, max = 10 )
Q
Q$1
Q$[1]
Q[1]
sapply(y, function(Z) Z[length(Z)])
A<-sapply(y, function(Z) Z[length(Z)])
class(A)
is.vector(A)
sapply(y, function(Z) Z[c(1,length(Z))])
lapply(1:3/3,round, digit=3)
round(1/3, digit=2)
sapply(1:3, function(x) x^2)
lapply(1:3, function(x) x^2)
sapply(1:3, function(x) x^2)
sapply(1:3, function(x) c(x^2 x^3)
sapply(1:3, function(x) c(x^2 x^3))
sapply(1:3, function(x) c(x^2, x^3))
sapply(1:3, function(x) c(x^2, x^3))
is.matrix(sapply(1:3, function(x) c(x^2, x^3)))
sapply(1:3, function(x) seq(1, length(3), by = 0.5))
sapply(1:3, function(x) seq(1, length(x), by = 0.5))
sapply(1:3, function(x) seq(1, length(x))
)
sapply(1:3, function(x) seq(1, x
)
)
sapply(1:3, function(x) seq(1, x, by = 0.5)
)
library(datasets)
library(ggplot2) # used in making pretty plots
# Check the [document of ToothGrowth data](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/ToothGrowth.html)
# exploratory data analysis
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth,3)
tail(ToothGrowth,3)
avg <- aggregate(len~.,data=ToothGrowth,mean)
avg
g <- ggplot(aes(x=dose, y = len), data = ToothGrowth) +
geom_point(aes(color = supp))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
print(g)
summary(ToothGrowth)
TG_summary <- ddply(ToothGrowth,.(dose, supp), summarize, mean = mean(len), sd = sd(len))
TG_summary
TG_summary <- ddply(ToothGrowth,.(dose, supp), summarize, mean = mean(len), sd = sd(len))
library(plyr)
TG_summary <- ddply(ToothGrowth,.(dose, supp), summarize, mean = mean(len), sd = sd(len))
TG_summary
is.factor(TG_summary$dose)
as.factor(TG_summary$dose)
g <- ggplot(aes(x=dose, y = len), data = ToothGrowth) +
geom_point(aes(color = supp))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
print(g)
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p+geom_boxplot()+facet_grid(.~supp)+labs(title = "plot1")
OJA <- ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 2] # subset of the data
VCA <- ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 2]
tA <- t.test(OJA, VCA, alternative = "two.sided", paired = FALSE, var.equal = FALSE)
OJA <- ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 2] # subset of the data
VCA <- ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 2]
tA <- t.test(OJA, VCA, alternative = "two.sided", paired = FALSE, var.equal = FALSE)
tA
OJB = ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 1]
VCB = ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 1]
tB <- t.test(OJB, VCB, alternative = "two.sided", paired = FALSE, var.equal = FALSE, conf.level = 0.95)
tB$p.value
OJC = ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 0.5]
VCC = ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 0.5]
tC <- t.test(OJC, VCC, alternative = "two.sided", paired = FALSE, var.equal = FALSE, conf.level = 0.95)
tC$p.value
p.adjust(pvalues, method="BH")
# correction about testing multiple hypothesis
pvalues <-c(tA$p.value, tB$p.value, tC$p.value)
p.adjust(pvalues, method="BH")
qplot(ToothGrowth$len)
qplot(len,
data = ToothGrowth,
facets = supp~.,
binwidth = 2)
qplot(len,
data = ToothGrowth,
facets = supp~., facets = . ~ dose,
binwidth = 2)
# 4. State your conclusions and the assumptions needed for your conclusions.
qplot(len,
data = ToothGrowth,
facets = supp~dose,
binwidth = 2)
qplot(ToothGrowth$len)
t.test(len~supp, data = dose_0.5, two.sided = TRUE, paired = FALSE, var.equal = FALSE)
# setwd("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart/rfiles")
rm(list =ls())
co_A <- 10
co_B <- 12
co_C <- 3
co_AB <- 1.9
co_BC <- 0.5
co_AC <-1
library(devtools)
install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
library(vennchart)
library(devtools)
install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
#library(vennchart)
library(devtools)
install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
#library(vennchart)
install.packages("devtools")
# library(devtools)
# install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
#library(vennchart)
# install.packages("devtools")
library(devtools)
# install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
#library(vennchart)
# install.packages("devtools")
library(devtools)
install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
#library(vennchart)
# install.packages("devtools")
library(devtools)
# install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
library(vennchart)
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC)
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC)
# source("plotvenn.R")
# source("plotvenntexts.R")
# source("sourceAll.R")
plotVenn(Q$circles)
plotVennTexts(Q$textspos, unit = "%)", connect = ":\n(")
title(main = "Big title")
# setwd("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart/rfiles")
rm(list =ls())
co_A <- 10
co_B <- 12
co_C <- 3
co_AB <- 1.9
co_BC <- 0.5
co_AC <-1
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC)
# install.packages("devtools")
library(devtools)
# install_github("vennchart", "weitingwlin")
# install("C:/Users/Wei-Ting/Dropbox/DataCoding/my_R/package/vennchart")
library(vennchart)
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC)
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC,
colors = c(rbg(0.145, 0.51, 0.71, 0.5),
rgb(1, 0.78, 0.16, 0.5),
rgb(1, 0.32, 0.16.0.5)))
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC,
colors = c(rbg(0.145, 0.51, 0.71, 0.5),
rgb(1, 0.78, 0.16, 0.5),
rgb(1, 0.32, 0.16,0.5)))
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC,
colors = list(rbg(0.145, 0.51, 0.71, 0.5),
rgb(1, 0.78, 0.16, 0.5),
rgb(1, 0.32, 0.16, 0.5)))
colors = list(rbg(0.145, 0.51, 0.71, 0.5),
rgb(1, 0.78, 0.16, 0.5),
rgb(1, 0.32, 0.16, 0.5))
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC,
colors = list(rgb(0.145, 0.51, 0.71, 0.5),
rgb(1, 0.78, 0.16, 0.5),
rgb(1, 0.32, 0.16, 0.5))
)
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC)
#source("sourceAll.R")
Q <- vennChart(A_all = co_A, B_all = co_B, C_all = co_C,
AandB = co_AB, AandC = co_AC, BandC = co_BC,
colors = list(rgb(0.145, 0.51, 0.71, 0.6),
rgb(1, 0.78, 0.16, 0.6),
rgb(1, 0.32, 0.16, 0.6))
)
setwd("~/Dropbox/DataCoding/onDiversity/R_note")
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(dplyr)
library(reshape2)
source("functions.R")
source("visFunctions.R")
data <- read.csv("https://raw.githubusercontent.com/sun-binrwei/ondiversity/update/python_note/output.csv")
# names(data)
# assign a section
s <- 1 # section 1
# section data (preserve only columns with information of interest)
secdata <- data[data$Section == s,
c("Gender", "Primary.Nat", "Last.Job.Domain.Description") ]
# e.g. we are interested in the diversity in these 3 things
# safe the "study group" assignment in another variable (data.frame)
secgroup <- data[data$Section == s, "Study.Group"]
# take a look at the data
head(secdata, 3)
secgroup
nicknames <- c("Gender", "Nat", "Job")
# use the `tabDiversity` function (in visFunctions.R) to tabulate the diversity index
dfout <- tabDiversity(secdata, secgroup, nicknames)
#head(dfout)
tail(dfout)
#v <- 1
p1 <- ggplot(dfout[dfout$variable == "IER",], aes(x = Group, y = value, fill = Scale))
p1 <- p1 + geom_bar(stat = "identity")
p1 <- p1 + facet_grid(Type ~ ., scales = "free")
p1 <- p1 +  theme(legend.position="none")
p1 <- p1 +   labs(title="IER")
p2 <- ggplot(dfout[dfout$variable == "Richness",], aes(x = Group, y = value, fill = Scale))
p2 <- p2 + geom_bar(stat = "identity")
p2 <- p2 + facet_grid(Type~ ., scales = "free")
p2 <- p2 +  theme(legend.position="none")
p2 <- p2 +   labs(title="Richness")
grid.arrange(p2,p1,  ncol=2)
p1 <- ggplot(dfout[dfout$variable == "IER",], aes(x = Group, y = value, fill = Scale))
p1 <- p1 + geom_bar(stat = "identity")
p1 <- p1 + facet_grid(Type ~ ., scales = "free")
p1 <- p1 +  theme(legend.position="none")
p1 <- p1 +   labs(title="IER")
p2 <- ggplot(dfout[dfout$variable == "Richness",], aes(x = Group, y = value, fill = Scale))
p2 <- p2 + geom_bar(stat = "identity")
p2 <- p2 + facet_grid(Type~ ., scales = "free")
p2 <- p2 +  theme(legend.position="none")
p2 <- p2 +   labs(title="Richness")
grid.arrange(p2,p1,  ncol=2)
# check what's in there
names(out_data)
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(dplyr)
library(reshape2)
source("functions.R")
source("visFunctions.R")
data <- read.csv("https://raw.githubusercontent.com/sun-binrwei/ondiversity/update/python_note/output.csv")
# names(data)
# check what's in there
names(data)
p <-ggplot(data, aes(Primary.Nat,fill = Gender))
p <- p +geom_bar(stat = "count")
p <- p + facet_grid(section ~ .)
p <- p + scale_fill_brewer(palette="Set1")
p <- p + theme(axis.text.x = element_text(angle = 60, hjust = 1))
p
p <-ggplot(data, aes(Primary.Nat,fill = Gender))
p <- p +geom_bar(stat = "count")
p <- p + facet_grid(Section ~ .)
p <- p + scale_fill_brewer(palette="Set1")
p <- p + theme(axis.text.x = element_text(angle = 60, hjust = 1))
p
#v <- 1
p1 <- ggplot(dfout[dfout$variable == "IER",], aes(x = Group, y = value, fill = Scale))
nicknames <- c("Gender", "Nat", "Job")
# use the `tabDiversity` function (in visFunctions.R) to tabulate the diversity index
dfout <- tabDiversity(secdata, secgroup, nicknames)
# assign a section
s <- 1 # section 1
# section data (preserve only columns with information of interest)
secdata <- data[data$Section == s,
c("Gender", "Primary.Nat", "Last.Job.Domain.Description") ]
# e.g. we are interested in the diversity in these 3 things
# safe the "study group" assignment in another variable (data.frame)
secgroup <- data[data$Section == s, "Study.Group"]
# take a look at the data
head(secdata, 3)
nicknames <- c("Gender", "Nat", "Job")
# use the `tabDiversity` function (in visFunctions.R) to tabulate the diversity index
dfout <- tabDiversity(secdata, secgroup, nicknames)
#head(dfout)
tail(dfout)
#v <- 1
p1 <- ggplot(dfout[dfout$variable == "IER",], aes(x = Group, y = value, fill = Scale))
p1 <- p1 + geom_bar(stat = "identity")
p1 <- p1 + facet_grid(Type ~ ., scales = "free")
p1 <- p1 +  theme(legend.position="none")
p1 <- p1 +   labs(title="IER")
p2 <- ggplot(dfout[dfout$variable == "Richness",], aes(x = Group, y = value, fill = Scale))
p2 <- p2 + geom_bar(stat = "identity")
p2 <- p2 + facet_grid(Type~ ., scales = "free")
p2 <- p2 +  theme(legend.position="none")
p2 <- p2 +   labs(title="Richness")
grid.arrange(p2,p1,  ncol=2)
df <- data.frame(section = rep(NA, ng+1),
IER_Nat = rep(NA, ng+1),
Richness_Nat = rep(NA, ng+1),
IER_Gender = rep(NA, ng +1),
Richness_Gender = rep(NA, ng +1),
IER_Job = rep(NA, ng +1),
Richness_Job = rep(NA, ng +1),
scale = rep(NA, ng +1))
df <- data.frame(section = rep(NA, ng+1),
IER_Nat = rep(NA, ng+1),
Richness_Nat = rep(NA, ng+1),
IER_Gender = rep(NA, ng +1),
Richness_Gender = rep(NA, ng +1),
IER_Job = rep(NA, ng +1),
Richness_Job = rep(NA, ng +1),
scale = rep(NA, ng +1))
# check what's in there
names(data)
out_data <- data
p <-ggplot(data, aes(Primary.Nat,fill = Gender))
p <- p +geom_bar(stat = "count")
p <- p + facet_grid(Section ~ .)
p <- p + scale_fill_brewer(palette="Set1")
p <- p + theme(axis.text.x = element_text(angle = 60, hjust = 1))
p
df <- data.frame(section = rep(NA, ng+1),
IER_Nat = rep(NA, ng+1),
Richness_Nat = rep(NA, ng+1),
IER_Gender = rep(NA, ng +1),
Richness_Gender = rep(NA, ng +1),
IER_Job = rep(NA, ng +1),
Richness_Job = rep(NA, ng +1),
scale = rep(NA, ng +1))
head(data)
grdata <- data[,  c("Gender", "Primary.Nat", "Last.Job.Domain.Description")]
grgroup <- data$Section
dfoutClass <- tabDiversity(grdata, secgroup, nicknames)
head(dfoutClass,3)
dfoutClass
data
grdata <- data[,  c("Gender", "Primary.Nat", "Last.Job.Domain.Description")]
grgroup <- data$Section
dfoutClass <- tabDiversity(grdata, grgroup, nicknames)
head(dfoutClass,3)
dfoutClass
p1 <- ggplot(dfout[dfoutClass$variable == "IER",], aes(x = Group, y = value, fill = Scale))
p1 <- p1 + geom_bar(stat = "identity")
p1 <- p1 + facet_grid(Type ~ ., scales = "free")
p1 <- p1 +  theme(legend.position="none")
p1 <- p1 +   labs(title="IER")
p2 <- ggplot(dfout[dfout$variable == "Richness",], aes(x = Group, y = value, fill = Scale))
p2 <- p2 + geom_bar(stat = "identity")
p2 <- p2 + facet_grid(Type~ ., scales = "free")
p2 <- p2 +  theme(legend.position="none")
p2 <- p2 +   labs(title="Richness")
grid.arrange(p2,p1,  ncol=2)
p1 <- ggplot(dfoutClass[dfoutClass$variable == "IER",], aes(x = Group, y = value, fill = Scale))
p1 <- p1 + geom_bar(stat = "identity")
p1 <- p1 + facet_grid(Type ~ ., scales = "free")
p1 <- p1 +  theme(legend.position="none")
p1 <- p1 +   labs(title="IER")
p2 <- ggplot(dfoutClass[dfoutClass$variable == "Richness",], aes(x = Group, y = value, fill = Scale))
p2 <- p2 + geom_bar(stat = "identity")
p2 <- p2 + facet_grid(Type~ ., scales = "free")
p2 <- p2 +  theme(legend.position="none")
p2 <- p2 +   labs(title="Richness")
grid.arrange(p2,p1,  ncol=2)
p1 <- ggplot(dfoutClass[dfoutClass$variable == "IER",], aes(x = Group, y = value, fill = Scale))
p1 <- p1 + geom_bar(stat = "identity")
p1 <- p1 + facet_grid(Type ~ ., scales = "free")
p1 <- p1 +  theme(legend.position="none")
p1 <- p1 +   labs(title="IER")
p2 <- ggplot(dfoutClass[dfoutClass$variable == "Richness",], aes(x = Group, y = value, fill = Scale))
p2 <- p2 + geom_bar(stat = "identity")
p2 <- p2 + facet_grid(Type~ ., scales = "free")
p2 <- p2 +  theme(legend.position="none")
p2 <- p2 +   labs(title="Richness")
grid.arrange(p2,p1,  ncol=2)
